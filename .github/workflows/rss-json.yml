name: RSS to JSON (Generate Only)

on:
  schedule:
    - cron: "0 */6 * * *"   # 每 6 小時執行一次
  workflow_dispatch: {}      # 允許手動觸發

jobs:
  build-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # 允許 commit 回 repo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      # ---------- Podcast 1 ----------
      - name: Podcast_1 RSS → JSON (skip on error)
        env:
          FEED_URL: https://feed.firstory.me/rss/user/ck60hb2c90wp50873k099tilh
          OUT_DIR: data/podcast/podcast_1
        continue-on-error: true
        run: |
          mkdir -p "$OUT_DIR"
          set +e
          node scripts/rss_to_json_podcast.js --feed "$FEED_URL" --out "$OUT_DIR"
          code=$?
          set -e
          if [ $code -ne 0 ]; then
            echo "[WARN] Podcast_1 fetch/parse failed. Keep previous JSONs and continue."
            exit 0
          fi

      # ---------- Podcast 2 ----------
      - name: Podcast_2 RSS → JSON (skip on error)
        env:
          FEED_URL: https://feed.firstory.me/rss/user/ckfqmqknj6k7e0800m9lk8at1
          OUT_DIR: data/podcast/podcast_2
        continue-on-error: true
        run: |
          mkdir -p "$OUT_DIR"
          set +e
          node scripts/rss_to_json_podcast.js --feed "$FEED_URL" --out "$OUT_DIR"
          code=$?
          set -e
          if [ $code -ne 0 ]; then
            echo "[WARN] Podcast_2 fetch/parse failed. Keep previous JSONs and continue."
            exit 0
          fi

      # ---------- Newsletter 1 ----------
- name: Newsletter_1 Substack RSS → JSON (skip on error, fallback to Paragraph)
  env:
    FEED_URL: https://wwhowbuhow.substack.com/feed
    OUT_DIR: data/newsletter/newsletter_1
  continue-on-error: true
  run: |
    mkdir -p "$OUT_DIR"
    set +e
    node scripts/rss_to_json_newsletter.js --feed "$FEED_URL" --out "$OUT_DIR"
    code=$?
    set -e
    if [ $code -ne 0 ]; then
      echo "[WARN] Substack RSS fetch/parse failed. Try Paragraph RSS as fallback."
      node scripts/rss_to_json_newsletter.js --feed "https://paragraph.xyz/@wwhowbuhow/rss" --out "$OUT_DIR"
      code2=$?
      if [ $code2 -ne 0 ]; then
        echo "[WARN] Paragraph RSS also failed. Keep previous JSONs and continue."
        exit 0
      fi
    fi


      # ---------- Newsletter 2 ----------
- name: Newsletter_2 Substack RSS → JSON (skip on error, fallback to Paragraph)
  env:
    FEED_URL: https://taiweb3.substack.com/feed
    OUT_DIR: data/newsletter/newsletter_2
  continue-on-error: true
  run: |
    mkdir -p "$OUT_DIR"
    set +e
    node scripts/rss_to_json_newsletter.js --feed "$FEED_URL" --out "$OUT_DIR"
    code=$?
    set -e
    if [ $code -ne 0 ]; then
      echo "[WARN] Substack RSS fetch/parse failed. Try Paragraph RSS as fallback."
      node scripts/rss_to_json_newsletter.js --feed "https://paragraph.xyz/@tw3/rss" --out "$OUT_DIR"
      code2=$?
      if [ $code2 -ne 0 ]; then
        echo "[WARN] Paragraph RSS also failed. Keep previous JSONs and continue."
        exit 0
      fi
    fi


      # ---------- Commit changes if any ----------
      - name: Commit JSON outputs (only when changed)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # 只檢查 data 目錄是否有變更；如本次任何 feed 失敗，既有檔案不會被清空/覆蓋，就不會出現變更
          if [ -n "$(git status --porcelain data/)" ]; then
            git add data/
            git commit -m "chore: update JSON from podcast/newsletter RSS (skip failed feeds)"
            git push
          else
            echo "No JSON changes to commit."
          fi
