name: RSS to JSON (Generate and Merge Fallback)

on:
  # 每天凌晨執行一次
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch: {}

jobs:
  build-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      EMAIL_TO: wwhowbuhow@pm.me

    steps:
      # ---------------------------------------------------------------
      # Step 1. repository & dependencies
      # ---------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      # ---------------------------------------------------------------
      # Step 2. RSS/arweave→JSON、資料合併、主要內容更新
      # ---------------------------------------------------------------
      - name: Podcast RSS → JSON (skip on error)
        continue-on-error: true
        run: node scripts/podcast.js
      - name: Newsletter Arweave data → JSON (skip on error)
        continue-on-error: true
        run: node scripts/newsletter.js

      # ---------------------------------------------------------------
      # Step 3. 自動補寫 voiceover 欄位到 newsletter JSON（Storj檢查及同步）
      # ---------------------------------------------------------------
      - name: Update newsletter JSON with voiceover mp3 URLs from Storj
        run: |
          node scripts/voiceover_sync.js --voiceover_dir "./voiceover/newsletter_1" --json_dir "data/newsletter/newsletter_1"
          node scripts/voiceover_sync.js --voiceover_dir "./voiceover/newsletter_2" --json_dir "data/newsletter/newsletter_2"

      # ---------------------------------------------------------------
      # Step 4. 自動分析異動檔案回傳分類摘要+emoji，以及組成 commit message
      # ---------------------------------------------------------------
      - name: Generate auto summary/commit message
        id: summary
        run: |
          node scripts/auto_commit_msg.js > commitmsg.txt
          echo "COMMIT_MESSAGE=$(cat commitmsg.txt)" >> $GITHUB_ENV

      # ---------------------------------------------------------------
      # Step 5. Commit changes（如有更新）
      # ---------------------------------------------------------------
      - name: Commit JSON outputs (only when changed)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain data/)" ]; then
            git add data/
            git commit -m "${{ env.COMMIT_MESSAGE }}"
            git push
          else
            echo "No JSON changes to commit."
          fi

      # ---------------------------------------------------------------
      # Step 6. Post-commit Email and notification
      # ---------------------------------------------------------------
      - name: Send notification via Notify.Events
        uses: notify-events/github-action@main
        with:
          token: ${{ secrets.NOTIFY_EVENTS_TOKEN }}
          title: "[GCAKE 更新通知]"
          text: |
            網站內容自動更新！
            ${{ env.COMMIT_MESSAGE }}
            Workflow: ${{ github.workflow }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
      
